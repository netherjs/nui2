<?php

require(sprintf(
	'%s/vendor/autoload.php',
	dirname(__FILE__,2)
));

(new class extends Nether\Console\Client{

	#[Nether\Console\Meta\Subcommand]
	#[Nether\Console\Meta\SubcommandOption('--dir',TRUE,Text:'Output directory [default: ./dist]')]
	#[Nether\Console\Meta\SubcommandOption('--jq',Text:'Refresh jQuery from its installed sources.')]
	#[Nether\Console\Meta\SubcommandOption('--bs',Text:'Refresh Bootstrap from its installed sources.')]
	#[Nether\Console\Meta\SubcommandOption('--fa',Text:'Refresh font-awesome from its installed sources.')]
	#[Nether\Console\Meta\SubcommandOption('--nui',Text:'Refresh NUI from its installed sources.')]
	#[Nether\Console\Meta\SubcommandOption('--all',Text:'Refresh everything from their installed sources.')]
	public function
	HandleBuild():
	Int {
	/*//
	@date 2021-01-09
	//*/

		$Opt = new Nether\Object\Mapped(NULL,[
			'BuildDir'    => $this->GetOption('dir') ?? './dist',
			'VendorDir'   => $this->GetOption('vendor') ?? './vendor',
			'jQuery'      => $this->GetOption('jq') ?? $this->GetOption('all') ?? FALSE,
			'Bootstrap'   => $this->GetOption('bs') ?? $this->GetOption('all') ?? FALSE,
			'FontAwesome' => $this->GetOption('fa') ?? $this->GetOption('all') ?? FALSE,
			'NUI'         => $this->GetOption('nui') ?? $this->GetOption('all') ?? FALSE
		]);

		$Dir = $this->HandleBuild_PrepareBuildDir($Opt->BuildDir);
		$Vendor = $this->HandleBuild_PrepareVendorDir($Opt->VendorDir);

		static::Message("Build Dir: {$Dir->GetRealPath()}");
		static::Message("Vendor Dir: {$Vendor->GetRealPath()}");

		if($Opt->jQuery)
		$this->HandleBuild_jQuery($Dir,$Vendor);

		////////

		return 0;
	}

	protected function
	HandleBuild_PrepareBuildDir(String $BuildDir):
	SplFileInfo {
	/*//
	@date 2021-01-09
	//*/

		if(!is_dir($BuildDir))
		mkdir($BuildDir,0777,TRUE);

		if(!is_dir($BuildDir))
		throw new Exception('Unable to create build directory.');

		$Dir = new SplFileInfo($BuildDir);

		if(!$Dir->IsDir())
		throw new Exception('Unable to read build directory.');

		return $Dir;
	}

	protected function
	HandleBuild_PrepareVendorDir(String $VendorDir):
	SplFileInfo {
	/*//
	@date 2021-01-09
	//*/

		if(!is_dir($VendorDir))
		throw new Exception('Unable to locate vendor dir.');

		$Dir = new SplFileInfo($VendorDir);

		if(!$Dir->IsDir())
		throw new Exception('Unable to read vendor dir.');

		return $Dir;
	}

	protected function
	HandleBuild_jQuery(SplFileInfo $Dest, SplFileInfo $Source):
	Void {
	/*//
	@date 2021-01-09
	//*/

		$DS = DIRECTORY_SEPARATOR;
		$SourcePath = "{$Source->GetRealPath()}{$DS}components{$DS}jquery";
		$DestPath = "{$Dest->GetRealPath()}";

		if(!is_dir($SourcePath))
		throw new Exception("Unable to read jQuery Source: {$SourcePath}");

		static::Message("jQuery Source: {$SourcePath}");

		copy(
			"{$SourcePath}{$DS}jquery.min.js",
			"{$DestPath}{$DS}jquery.min.js"
		);

		return;
	}

})->Run();
